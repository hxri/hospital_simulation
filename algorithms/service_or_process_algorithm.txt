1. Create a function called "registration_process" that takes in three parameters: env (environment), registration, and patient.
2. Initialize a global variable called "num_registration" and increment it by 1.
3. Print a statement that displays the patient's name and the time they arrived at the registration desk.
4. Create a variable called "arrival_time" and set it equal to the current time in the environment.
5. Create a variable called "processing_time" and set it equal to a constant value for the average time it takes to complete the registration process plus a random value between 0 and 5.
6. Use a "with" statement to request access to the registration resource and yield until it is granted.
7. Once granted access, create a variable called "start_time" and set it equal to the current time in the environment.
8. Print a statement that displays the patient's name and the time they started the registration process.
9. Use the env.timeout() function to delay the process by the "processing_time" value.
10. Create a variable called "finish_time" and set it equal to the current time in the environment.
11. Print a statement that displays the patient's name and the time they finished the registration process.
12. Create a variable called "total_wait_time" and set it equal to the difference between "start_time" and "arrival_time" divided by 60 (to convert to minutes).
13. Print a statement that displays the patient's name and the total wait time they experienced at the registration desk.
14. Append the "total_wait_time" to the "reg_wait_times" global list and append the "processing_time" to the "reg_service_times" global list.
15. Update the "flow" global dictionary with the patient's registration information including arrival time, start time, finish time, and wait time.
16. Return the "total_wait_time" value.